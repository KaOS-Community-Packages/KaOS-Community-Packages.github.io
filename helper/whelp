#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""whelp: a command line helper for simplify KCP-center update"""

__VERSION__ = "0.9.2"

import os, sys, json, argparse, codecs, ConfigParser, StringIO, re, textwrap, time, ssl
import urllib2 as urllib
from utils_whelp import private_keys, data_local,  item_html, broken_html, \
    broken_item_html, build_item_template, html_item_detail_buttons, html_item_detail_head

if (not os.environ.get('PYTHONHTTPSVERIFY', '') and
    getattr(ssl, '_create_unverified_context', None)):
    ssl._create_default_https_context = ssl._create_unverified_context

def get_repos_kcp():
    url_kcp = "http://api.github.com/orgs/KaOS-Community-Packages/repos?page=%s&per_page=%s" + \
              private_keys
    per_page = 100
    repos, page = [], 1

    while True:
        print "Repositories kcp: range(%s-%s)" % ((page - 1) * per_page, page * per_page)
        partial_repos = json.loads(urllib.urlopen(url_kcp % (page, per_page)).read())
        repos += partial_repos
        page += 1
        if len(partial_repos) < per_page:
            if type(partial_repos) is dict:
                print "API rate limit exceeded"
                sys.exit()
            break

    if len(repos) > 0:
        print "=================================="
        print "Total-repositories: %s" % (len(repos))

    return repos


def get_repos_kaos():
    url_kaosx = "http://api.github.com/repos/kaosx/%s/git/trees/master?" + private_keys
    repos_kaos = {}

    for kaosx in ['core', 'main', 'apps']:
        partial = json.loads(urllib.urlopen(url_kaosx % kaosx).read())
        repos_kaos[kaosx] = [item['path'] for item in partial['tree']]
        print "Repositories kaos: %s" % kaosx

    return repos_kaos


def synchronize(metadata):
    data_remote = get_repos_kcp()
    for item_remote in data_remote:
        if not [item_local for item_local in data_local if
                item_local["name"] == item_remote["name"]]:
            if not item_remote["name"] in ("KaOS-Community-Packages.github.io"):
                new_item = dict(name=item_remote["name"],
                                description=item_remote["description"],
                                category="Others",
                                screenshot="images/big.png",
                                created_at=item_remote["created_at"],
                                pushed_at=item_remote["pushed_at"],
                                stargazers_count=item_remote["stargazers_count"])

                for key, value in parser_pkg(new_item["name"]).iteritems():
                    new_item[key] = value
                data_local.insert(0, new_item)
                generate_html_item(new_item["name"])
                print "Add: ", new_item["name"]

    for item_local in data_local:
        if not [item_remote for item_remote in data_remote if item_remote["name"] ==
                item_local["name"]]:
            print "Del: ", item_local["name"]
            data_local.remove(item_local)
            try:
                os.remove("../items/%s.htm" % item_local["name"])
            except OSError:
                pass
        for item_remote in (item_remote for item_remote in data_remote if
                            item_remote["name"] == item_local["name"]):
            item_local["pushed_at"] = item_remote["pushed_at"]
            item_local["stargazers_count"] = item_remote["stargazers_count"]

    if metadata:
        print "This can take a few minutes..."
        for item_local in data_local:
            for key, value in parser_pkg(item_local["name"]).iteritems():
                item_local[key] = value
            print "get metadata %s" % item_local['name']

    with open('data.json', 'w') as outfile:
        json.dump(data_local, outfile)


def set_value(name, var, value):
    try:
        list_item = list(item_local for item_local in data_local if item_local["name"] == name)
        if not list_item:
            print "error: the package [%s] not exists" % name
            sys.exit()
        for item in list_item:
            item[var] = value
            with open('data.json', 'w') as outfile:
                json.dump(data_local, outfile)

            print "New %s for %s: %s" % (var, name, value)
    except:
        print "Error in set new %s" % var


def get_metadata(name):
    list_item = list(item_local for item_local in data_local if item_local["name"] == name)

    if not list_item:
        print "error: the package [%s] not exists" % name
        sys.exit()

    for item in list_item:
        for key, value in parser_pkg(name).iteritems():
            item[key] = value
        with open('data.json', 'w') as outfile:
            json.dump(data_local, outfile)
        print "=================================="
        print "Metadata completed for %s" % name
        print "=================================="


def print_item(name):
    try:
        list_item = list(item_local for item_local in data_local if
                         item_local["name"] == name)
        if not list_item:
            print "error: the package [%s] not exists" % (name)
        for item in list_item:
            print "=================================="
            print "name: %s" % item['name']
            print "description: %s" % item['description']
            print "category: %s" % item['category']
            print "screenshot: %s" % item['screenshot']
            print "=================================="
    except:
        print "Error in print data of package"
        sys.exit()


def generate_html(rapid=False):
    # try:
    if not rapid:
        print "=================================="
        print "Rebuild HTML start!!!"
        print "=================================="
        print "This can take a few minutes..."

    text, text2, broken_packages = "","", []

    for i, item_local in enumerate(sorted(data_local, key=lambda k: k['stargazers_count'], reverse=True) ):
        item_local['i'] = i
        text += item_html % item_local
        if not rapid:
            brokenp = generate_detail_html(item_local)
            if brokenp:
                broken_packages.append(brokenp)
    for i, item_local in enumerate(
            sorted(data_local, key=lambda k: k['pushed_at'], reverse=True)):
        item_local['i'] = i
        text2 += item_html % item_local

    with codecs.open('template.html', 'r', "utf-8") as infile, \
            codecs.open('../index.html', 'w', "utf-8") as outfile:
        for line in infile:
            line = line.replace("<item></item>", text)
            line = line.replace("<date></date>", time.strftime("%Y-%m-%d"))
            line = line.replace("<ver></ver>", __VERSION__)
            outfile.write(line)

    with codecs.open('template2.html', 'r', "utf-8") as infile, \
            codecs.open('../index2.html', 'w', "utf-8") as outfile:
        for line in infile:
            line = line.replace("<item></item>", text2)
            line = line.replace("<date></date>", time.strftime("%Y-%m-%d"))
            line = line.replace("<ver></ver>", __VERSION__)
            outfile.write(line)

    if not rapid:
        html_item_broken = broken_html % time.strftime("%Y-%m-%d")
        for name in broken_packages:
            html_item_broken += broken_item_html % (dict(name=name))

        with open('template_item.html') as infile, codecs.open("../items/broken.html", 'w',
                                                               "utf-8") as outfile:
            for line in infile:
                line = line.replace("<item></item>", html_item_broken)
                outfile.write(line)

    print "=================================="
    print "Rebuild HTML completed!!!"
    print "=================================="


def generate_html_item(name):
    for item_local in (item_local for item_local in data_local if
                       item_local["name"] == name):
        generate_detail_html(item_local)
        print "=================================="
        print "Rebuild HTML %s completed!!!" % (item_local['name'])
        print "=================================="
        return


def generate_detail_html(item):
    print item['name']

    if 'pkgver' in item.keys() and 'pkgrel' in item.keys():
        html_item_detail = html_item_detail_head % item
    else:
        html_item_detail = html_item_detail_head % (dict(name=item['name'], pkgver="", pkgrel=""))

    columns = ['description', 'url', 'license', 'depends', 'makedepends',
               'required_by', 'created_at', 'pushed_at']

    item['required_by'], broken = [], ""
    html_item_detail += '<table cellpadding="10"><tr><td width="80%">'

    for var in (var for var in columns if var in item.keys()):
        html_item_detail, broken = build_item_template(data_local, item, var, html_item_detail,broken)


    html_item_detail += '</td></table>'

    if broken:
        html_item_detail = '<b style="margin-left:700px;color:red;" >BROKEN</b>' + html_item_detail
        print "Detected broken package: %s" % item['name']
    else:
        html_item_detail += html_item_detail_buttons % item

    with open('template_item.html') as infile, \
            codecs.open("../items/%s.html" % item['name'], 'w', "utf-8") as outfile:
        for line in infile:
            line = line.replace("<item></item>", html_item_detail)
            outfile.write(line)

    if broken:
        return item['name']
    else:
        return None


def parser_pkg(name):
    try:
        url = "https://raw.githubusercontent.com/KaOS-Community-Packages/%s/master/PKGBUILD"
        ini_str = '[pkg]\n' + urllib.urlopen(url % name).read()
        for str_func in ['pkgver', 'check', 'prepare', 'build', 'package']:
            ini_str = re.sub(str_func + '.*\((.|\n)*', '', ini_str)
            ini_str = ini_str.replace("(\n", "(").replace("\n)", ")")
        ini_fp = StringIO.StringIO(ini_str)
        config = ConfigParser.RawConfigParser()
        config.readfp(ini_fp)
        return dict(config.items('pkg'))
    except:
        return dict(pkgver="")


def main():
    parser = argparse.ArgumentParser(prog='PROG',
                                     description='This is a web-helper for generate kcp-center web',
                                     usage='%(prog)s [options]',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent('''\
                                     Upload your changes to GitHub repository
                                     --------------------------------
                                     git add .
                                     git commit -m "Update web"
                                     git push origin master
                                             '''))

    parser.add_argument('-v', dest='version', help='Show version', action='version',
                        version=__VERSION__)
    parser.add_argument("-n", dest="package", help="Name of package")
    parser.add_argument("-s", dest="synchronize", help="Synchronize remote repos changes",
                        action="store_true", default=False)
    parser.add_argument("-sm", dest="synchronize_metadata",
                        help="Synchronize remote repos & metadata changes",
                        action="store_true", default=False)
    parser.add_argument("-r", dest="regenerate", help="Rebuild html files", action="store_true",
                        default=False)
    parser.add_argument("-i", dest="info", help="Show data of package", action="store_true",
                        default=False)
    parser.add_argument("-m", dest="metadata", help="Synchronize remote metadata of the package",
                        action="store_true", default=False)
    parser.add_argument("-d", dest="description", help="Set new description of package")
    parser.add_argument("-ss", dest="screenshot", help="Set new screenshot of package")
    parser.add_argument("-c", dest="category", help="Set new  category of package", choices=(
        "AudioVideo", "Development", "Education", "Game", "Graphics", "Library",
        "Network", "Office", "Science", "Settings", "System", "Utility", "Others"))

    args = parser.parse_args()

    if args.synchronize:
        synchronize(False)
        generate_html(True)
    elif args.synchronize_metadata:
        synchronize(True)
        generate_html()
    elif args.package and args.metadata:
        get_metadata(args.package)
        generate_html_item(args.package)
    elif args.package and args.info:
        print_item(args.package)
    elif args.regenerate:
        generate_html()
    elif args.package and args.description:
        set_value(args.package, 'description', args.description)
        generate_html(True)
    elif args.package and args.category:
        set_value(args.package, 'category', args.category)
        generate_html(True)
    elif args.package and args.screenshot:
        set_value(args.package, 'screenshot', args.screenshot)
        generate_html(True)
    else:
        print "error: expected one argument"
        sys.exit()


if __name__ == "__main__":
    main()
