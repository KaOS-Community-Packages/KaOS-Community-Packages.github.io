#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__VERSION__ = "0.10.0"

import argparse
import json
import os
import sys
import textwrap

def read_json(filepath):
    data = []
    with open(filepath) as data_file:
        data = json.load(data_file)
    return data


def write_json(data, filepath):
    with open(filepath, 'w') as data_file:
        json.dump(data, data_file)


def index_list_by_name(data):
    index = {}
    for item in data:
        index[item['name']] = item
    return index


def get_item(data, name):
    return list(item for item in data if item['name'] == name)


def update_remote_repo():
    os.system('kcp -u')


def get_kcp_path():
    return os.path.join(os.environ.get('HOME'), '.config', 'kcp', 'kcp.json')


def print_title(*argv):
    print("==================================")
    for message in argv:
        print(message)
    print("==================================")


local_file = 'data.json'
kcp_file = get_kcp_path()


def synchronize():
    print_title('Refresh KCP database…')
    update_remote_repo()

    data_local = read_json(local_file)
    data_remote = read_json(kcp_file)
    index_local = index_list_by_name(data_local['packages'])
    index_remote = index_list_by_name(data_remote['packages'])

    print_title('Update local database…')
    created = 0
    updated = 0
    deleted = 0
    for item in data_local['packages']:
        if item['name'] not in index_remote:
            deleted += 1
            print('Del: %s' % item['name'])
    for item in data_remote['packages']:
        if item['name'] in index_local:
            updated += 1
            print('Update: %s' % item['name'])
            local_item = index_local[item['name']]
            item['category'] = local_item['category']
            item['pkgdesc'] = item['description']
            item['description'] = local_item['description']
            item['screenshot'] = local_item['screenshot']
        else:
            created += 1
            print('Add: %s' % item['name'])
            item['category'] = 'Others'
            item['pkgdesc'] = item['description']
            item['screenshot'] = 'images/big.png'
        item.pop('local_version', None)
        item.pop('remote_version', None)

    print_title('Save local database…')
    write_json(data_remote, local_file)
    print('%d created packages' % created)
    print('%d updated packages' % updated)
    print('%d deleted packages' % deleted)


def set_value(name, key, value):
    data_local = read_json(local_file)

    try:
        list_item = get_item(data_local['packages'], name)
        if not list_item:
            print('error: the package [%s] doesn’t exist' % name)
            sys.exit()
        for item in list_item:
            item[key] = value
        write_json(data_local, local_file)
    except:
        print('Error in setting new %s' % var)


def print_item(name):
    data_local = read_json(local_file)

    try:
        list_item = get_item(data_local['packages'], name)
        if not list_item:
            print('error: the package [%s] doesn’t exist' % name)
            sys.exit()
        for item in list_item:
            name = 'name       : %s' % item['name']
            description = 'description: %s' % item['description']
            category = 'category   : %s' % item['category']
            screenshot = 'screenshot : %s' % item['screenshot']
            print_title(name, description, category, screenshot)
    except:
        print('Error in printing data of %s' % name)

def main():
    parser = argparse.ArgumentParser(prog='PROG',
                                     description='This is a web-helper for generate kcp-center web',
                                     usage='%(prog)s [options]',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent('''\
                                     Upload your changes to GitHub repository
                                     --------------------------------
                                     git add .
                                     git commit -m "Update web"
                                     git push origin master
                                             '''))

    parser.add_argument('-v', dest='version', help='Show version', action='version',
                        version=__VERSION__)
    parser.add_argument("-n", dest="package", help="Name of the package")
    parser.add_argument("-s", dest="synchronize", help="Synchronize the remote repos changes",
                        action="store_true", default=False)
    parser.add_argument("-i", dest="info", help="Show the data of the package", action="store_true",
                        default=False)
    parser.add_argument("-d", dest="description", help="Set new description of package")
    parser.add_argument("-ss", dest="screenshot", help="Set new screenshot of package")
    parser.add_argument("-c", dest="category", help="Set new  category of package", choices=(
        "AudioVideo", "Development", "Education", "Game", "Graphics", "Library",
        "Network", "Office", "Science", "Settings", "System", "Utility", "Others"))

    args = parser.parse_args()

    if args.synchronize:
        synchronize()
    elif args.package and args.info:
        print_item(args.package)
    elif args.package and args.description:
        set_value(args.package, 'description', args.description)
    elif args.package and args.category:
        set_value(args.package, 'category', args.category)
    elif args.package and args.screenshot:
        set_value(args.package, 'screenshot', args.screenshot)
    else:
        print("error: expected one argument")
        sys.exit()


if __name__ == "__main__":
    main()
